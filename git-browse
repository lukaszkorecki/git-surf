#!/usr/bin/env bash
set -e
# utility / setup functions
logerr() { echo "$@" 1>&2; }

# detect open-url command
(  uname | grep Darwin >/dev/null ) && open_command='open'
(  uname | grep Linux >/dev/null ) && open_command='xdg-open'

if [[ -z "$open_command" ]] ; then
  logerr 'No command to open the url in the browser!'
fi

REMOTE=origin
SHOWHELP=n
SHOWCOMMIT=n
RANGE=""
# TODO
SHOWPULLREQUEST=n

while getopts "hc:R:r:p" OPTIONS; do
  case "$OPTIONS" in
    h)
      SHOWHELP=y
      ;;

    c)
      SHOWCOMMIT=y
      COMMIT="$OPTARG"
      ;;

    R)
      REMOTE="$OPTARG"
      ;;

    r)
      RANGE="$OPTARG"
      ;;
    p)
      SHOWPULLREQUEST=y
      ;;
  esac
done

# last unparsed arg becomes the file
FILE=$(echo "$*" | awk '{ print $NF }')

function showHelp() {
  cat <<-HELP_MSG
Usage: `basename $0` [OPTION] [FILE or COMMIT SHA1]
Quick and dirty tool for browsing files, commits and pull requests on GitHub
Example: git browse -r10,30 git-browse

Will open default web browser pointing to the git-browse file on GitHub with
lines 10 to 30 highlighted. If a tool like open (OSX) or xdg-open (Linux) is
not available, the following url will be printed to STDOUT

https://github.com/lukaszkorecki/git-browse/tree/master/git-browse#L10-L30

Options:

-r - range of lines to highlight can be single line, or a range of lines, comma
		separated (10,30)
-c - opens specified commit
-R - specifies different remote than origin
-p - opens a pull requests for current branch
HELP_MSG
}

if [[ $SHOWHELP == 'y' ]] ; then
	showHelp
  exit 0
fi


# get current branch for given repo
currentBranch() {
  git symbolic-ref HEAD | rev | cut -d/ -f 1 | rev
}

# parse out a path to a file and/or repo
# first arg is the path to the file, falls back to repo root
getRepoRoot() {
  # git rev-parse --show-toplevel
  if [[ -z "$1" || "$1" == "." ]] ; then
    echo ""
  else
    git ls-tree $(currentBranch) --full-name $1 | awk '{ print $4 }'
  fi
}


# FIXME needs to handle more
# first arg is the remote name, falls back to 'origin'
# Example:
#   git@github.com:lukaszkorecki/git-browse.git (fetch)
#   ->
#   lukaszkorecki/git-browse
gitRepoUrl() {
  remote_url=$(git remote -v | grep -m1 $1 |  awk '{ print $2 }'  )
  # 1st sed removes git@github.com/, https://github.com/ and
  # git@github.com:
  user_and_repo_name=$(echo $remote_url | sed 's/.*github.com.//' | sed 's/.git$//' )
  if [[ -z $user_and_repo_name ]] ; then
    logerr "Remote named '$1' was not found!"
    exit 1
  fi

  echo "https://github.com/$user_and_repo_name/tree/$(currentBranch)"
}

# FIXME github only
getCommitUrl() {
  echo $(gitRepoUrl $REMOTE | sed "s/\/$(currentBranch)//" | sed "s/tree/commit/")/$1
}


parseRange() {
  if [[ -z "$1" ]] ; then
    echo ""
  else
    echo "#L$(echo "$1" | sed 's/\,/-L/')"
  fi
}
# commit mode
if [[ $SHOWCOMMIT == 'y' ]] ; then
  url=$(getCommitUrl $COMMIT)
else
  range=$(parseRange $RANGE)
  path=$(getRepoRoot $FILE)
  url="$(gitRepoUrl $REMOTE)/$path$range"

fi

echo $url
if [[ -z $DEBUG ]] ; then
  eval "$open_command '$url'"
fi
